package com.java.patterns.proxy;

import com.java.patterns.proxy.impl.Courier;

/**
 * 代理模式（静态代理）
 *
 * 定义：为其它对象提供一种代理以控制对这个对象的访问。
 * 在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。
 *
 * 组成：①抽象角色：通过接口或抽象类声明真实角色实现的业务方法。
 * ②代理角色：实现抽象角色，是真实角色的代理，通过真实角色的业务逻辑方法来实现抽象方法，并可以附加自己的操作。
 * ③真实角色：实现抽象角色，定义真实角色所要实现的业务逻辑，供代理角色调用。
 *
 * 优点：①职责清晰，真实的角色就是实现实际的业务逻辑，不用关心其他非本职责的事务，
 * 通过后期的代理完成一件完成事务，附带的结果就是编程简洁清晰。
 * ②代理对象可以在客户端和目标对象之间起到中介的作用，这样起到了中介的作用和保护了目标对象的作用。
 * ③高扩展性
 *
 * 结构：一个是真正的你要访问的对象(目标类)，一个是代理对象,真正对象与代理
 * 对象实现同一个接口,先访问代理类再访问真正要访问的对象。
 *
 * 代理模式分为静态代理、动态代理。
 * 静态代理：是由程序员创建或工具生成代理类的源码，再编译代理类。
 * 所谓静态也就是在程序运行前就已经存在代理类的字节码文件，代理类和委托类的关系在运行前就确定了。
 *
 * 动态代理：是在实现阶段不用关心代理类，而在运行阶段才指定哪一个对象。
 *
 * 应用场景：①远程代理，即为一个对象在不同的地址空间提供局部代表。这样可以隐藏一个对象存在于不同地址空间的事实
 * ②虚拟代理，即根据需要创建开销很大的对象。通过它来存放实例化需要很长时间的真实对象。
 * 如带有多张图票的网页，文字先被现实，而图片这慢慢加载，在加载完成之前由一张小的图标代替
 * ③安全代理：控制真实对象访问是的权限
 * ④智能指引：当调用真实对象时，代理处理另外一些事
 *
 * 案例：淘宝购物，卖家发货给买家，货物由快递公司的小哥代替卖家交给买家
 *
 * Created by zhengxianyou on 2018/5/1 0001.
 */
public class Proxy {

    public static void main(String[] args) {
        Buyer buyer = new Buyer("购物达人");
        Courier courier = new Courier(buyer);

        courier.sendCloth();
        courier.sendFlower();
        courier.sendOthers();
    }

}
